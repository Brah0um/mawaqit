<?php

namespace AppBundle\Repository;

use AppBundle\Entity\User;
use AppBundle\Entity\Configuration;

/**
 * MosqueRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MosqueRepository extends \Doctrine\ORM\EntityRepository {

    /**
     * 
     * @param User $user
     * @param string $search
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    function getMosquesByUser(User $user, $search) {
        $qb = $this->createQueryBuilder("m");

        if (!empty($search)) {
            $qb->andWhere("m.name LIKE :search "
                            . "OR m.associationName LIKE :search "
                            . "OR m.email LIKE :search "
                            . "OR m.address LIKE :search "
                            . "OR m.city LIKE :search"
                    )
                    ->setParameter(":search", "%$search%");
        }
        if (!$user->isAdmin()) {
            $qb->andWhere("m.user = :user_id")
                    ->setParameter(":user_id", $user->getId());
        }

        $qb->orderBy("m.id", "DESC");

        return $qb;
    }

    /**
     * get configured mosques 
     * @param integer $nbMax
     * @return array
     */
    private function getConfiguredMosquesQuery($nbMax = null) {
        $qb = $this->createQueryBuilder("m")
                ->innerJoin("m.configuration", "c")
                ->orderBy("m.id", "ASC");

        if (is_numeric($nbMax)) {
            $qb->setMaxResults($nbMax);
        }
        return $qb;
    }

    /**
     * get configured mosques with minimum one image set (image1)
     * @param integer $nbMax
     * @return array
     */
    function getConfiguredMosquesWithImage($nbMax = null) {
        return $this->getConfiguredMosquesQuery($nbMax)
                        ->where("m.image1 IS NOT NULL")
                        ->getQuery()
                        ->getResult();
    }

    /**
     * get configured mosques count
     * @return integer
     */
    function getConfiguredMosquesCount() {
        return $this->getConfiguredMosquesQuery()
                        ->select("count(m.id)")
                        ->getQuery()
                        ->getSingleScalarResult();
    }

    /**
     * get configured mosques with api calcul mode 
     * @param integer $nbMax
     * @return integer
     */
    function getApiCalculConfiguredMosquesCount() {
        return $this->getConfiguredMosquesQuery()
                        ->select("count(m.id)")
                        ->where("c.sourceCalcul = :calcul")
                        ->setParameter(":calcul", Configuration::SOURCE_API)
                        ->getQuery()
                        ->getSingleScalarResult();
    }

    /**
     * set updated to now for all mosques
     */
    function forceUpdateAll() {
        $qb = $this->createQueryBuilder("m")
                ->update()
                ->set("m.updated", ":date")
                ->setParameter(":date", (new \DateTime())->format("Y-m-d h:i:s"));
        $qb->getQuery()->execute();
        $qb = $this->getEntityManager()->createQueryBuilder()
                ->update("AppBundle:Configuration", "c")
                ->set("c.updated", ":date")
                ->setParameter(":date", (new \DateTime())->format("Y-m-d h:i:s"));
        $qb->getQuery()->execute();
    }

}
